#!/usr/bin/env python3

# this should not be imported
assert __name__ == '__main__'

# assure we are in the right directory, so we find our relative imports
import os
os.chdir(os.path.dirname(__file__))

# library imports
from email.parser import BytesParser as MailParser
from sys import stdin, exit
import atexit
from logging import shutdown as logging_shutdown

# relative imports
import mailer
import mysqltable
import wikicrawl
import conf
import my_logging
import logging

message = None
real_sender = None
real_recipient = None

def mailstr():
	return """##################################################
SMTP From: %s
SMTP TO:   %s
##################################################
%s
##################################################""" % (real_sender, real_recipient, message.as_string())

def fail():
	logger.critical(mailstr())
	exit(conf.exit_fail_code)

# setup logging
atexit.register(logging_shutdown)
logger = my_logging.getLogger(__name__)

logger.debug("Starting mail handling as user %d in group %d"%(os.geteuid(),os.getgid()))

# these may be None, if we are not called by qmail
real_sender = os.getenv("SENDER")
real_recipient = os.getenv("RECIPIENT")

# read message from stdin
try:
	message = MailParser().parse(stdin.buffer)
except Exception as e:
	logger.critical("Could not read mail from stdin",exc_info=True,stack_info=True)
	fail()

logger.debug("Processing mail:\n%s"%mailstr())

lists = []
direct_users = []
try:
	# get mailing list addresses in To and Cc fields
	lists = mailer.get_lists(message)
	logger.debug("Destination mailing lists: %s" % str(list(lists)))
	# get people in To and Cc fields
	direct_users = mailer.get_users(message)
	logger.debug("Direct destination users: %s" % str(list(direct_users)))
except Exception as e:
	logger.error("Error when analysing destinations in this mail:\n%s"%mailstr(),exc_info=True,stack_info=True)
	# don't exit, still try to send it to the other users

# crawl the wiki to get the destination people
lists_to_users = dict()
try:
	for l in lists:
		_tmp = wikicrawl.get_users(l)
		lists_to_users[l] = _tmp
		logger.debug("List '%s' has members: %s"%(l,", ".join(_tmp)))
except Exception as e:
	logger.error("Error when getting users for list %s from the wiki for this mail:\n%s"%(l,mailstr()),exc_info=True,stack_info=True)

# lookup mail addresses for the destination users
direct_mails = []
lists_to_mails = dict()
try:
	mailTable = mysqltable.MailTable()
	direct_mails = list(map(mailTable.get_mail, direct_users))
	logger.debug("direct_mails: %s"%", ".join(direct_mails))
	for l,_users in lists_to_users.items():
		_tmp = list(map(mailTable.get_mail, _users))
		lists_to_mails[l] = _tmp
		logger.debug("List '%s' has member mails: %s"%(l,", ".join(_tmp)))
except Exception as e:
	logger.error("Could not lookup email addresses in wiki database for this mail:\n%s"%mailstr(),exc_info=True,stack_info=True)

explicit_mails = mailer.get_mail_destination_addresses(message)
logger.debug("explicit_mails: %s"%str(explicit_mails))
candidate_destinations = set(direct_mails)
for mails in lists_to_mails.values():
	candidate_destinations |= set(mails)
logger.debug("candidate_destinations: %s"%str(candidate_destinations))
try:
	# maybe an address could not be found for everybody
	candidate_destinations.remove(None)
except KeyError:
	pass

if len(candidate_destinations) == 0:
	logger.info("Mail has no valid destinations")
	exit(conf.exit_fail_code)

def _invert_dict(d):
	ret = dict()
	for k,vl in d.items():
		for v in vl:
			ret.setdefault(v,[]).append(k)
	return ret

mails_to_lists = _invert_dict(lists_to_mails)
if logger.isEnabledFor(logging.DEBUG):
	for m,ls in mails_to_lists.items():
		logger.debug("Email %s appears in the following lists: %s"%(m,", ".join(ls)))

def canonify_subst(s):
	for c,subst in conf.character_substitutions:
		s = s.replace(subst,c)

actual_destinations = []
for dst in candidate_destinations:
	logger.debug("eliminating duplicates for %s."%dst)
	if dst in explicit_mails:
		logger.debug("%s was also directly addressed, outside of our system"%dst)
		pass
	elif dst in direct_mails:
		logger.debug("%s was addressed by xxx-user-name..."%dst)
		if canonify_subst(mailTable.get_mail(mailer.strip(real_recipient))) == canonify_subst(dst):
			logger.debug("real_recipient %s matches dst %s"%(real_recipient,dst))
			actual_destinations.append(dst)
		else:
			logger.debug("real_recipient %s does not match dst %s"%(real_recipient,dst))
			# we will be or have been called another time for this mail
			pass
	else:
		# user was addressed by one or more mailing list(s)
		users_lists = sorted(mails_to_lists.get(dst,[]))
		if len(users_lists) == 0:
			# it's a bug if this happens
			logger.critical("Destination %s was in the destination candidates but seems not addressed by this mail:\n%s"%(dst,mailstr()))
			continue
		if canonify_subst(mailer.strip(real_recipient)) == canonify_subst(users_lists[0]):
			# because users_lists is sorted and we compare only to the first element
			# the mail will only be sent to the user once
			logger.debug("send mail because of list %s"%real_recipient)
			actual_destinations.append(dst)
		else:
			logger.debug("not sending mail now because %s != %s"%(mailer.strip(real_recipient),users_lists[0]))
			# we will be or have been called another time for this mail
			pass

if len(actual_destinations) == 0:
	logger.debug("No actual destinations.")
	exit(0)

# for the unsubscribe button
try:
	mailer.add_listinfo(message)
except Exception as e:
	logger.error("failed to add listinfo for this mail\n%s"%mailstr(),exc_info=True,stack_info=True)

try:
	mailer.send_mail(message, actual_destinations)
except Exception as e:
	logger.critical("Failed to send mail.")
	fail()

logger.debug("mail sent.")
exit(0)
